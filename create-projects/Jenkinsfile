// BuildConfig environment variables
def odsNamespace = env.ODS_NAMESPACE ?: 'ods'
def odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'
def odsGitRef = env.ODS_GIT_REF ?: 'master'
def odsBitbucketProject = env.ODS_BITBUCKET_PROJECT ?: 'opendevstack'
def projectId = env.PROJECT_ID
def projectAdmins = env.PROJECT_ADMIN ?: ''
def projectGroups = env.PROJECT_GROUPS ?: ''
def pipelineTriggerSecret = env.PIPELINE_TRIGGER_SECRET
def cdUserIdB64 = env.CD_USER_ID_B64
def cdUserType = env.CD_USER_TYPE

// Jenkins DeploymentConfig environment variables
def bitbucketHost
def dockerRegistry

def pipelineOpenShiftProject
node {
  dockerRegistry = env.DOCKER_REGISTRY
  bitbucketHost = env.GIT_SERVER_URL ?: env.BITBUCKET_HOST
  echo("Resolved variable 'bitbucketHost' to '${bitbucketHost}'! [defaultHost=${env.BITBUCKET_HOST}, customHost=${env.GIT_SERVER_URL}]")
  pipelineOpenShiftProject = env.JOB_NAME.split('/').first()
}

def gitIsHttps = false

def conts = containerTemplate(
  name: 'jnlp',
  image: "${dockerRegistry}/${odsNamespace}/jenkins-slave-base:${odsImageTag}",
  workingDir: '/tmp',
  alwaysPullImage: true,
  args: ''
)
def podLabel = "create-projects-${projectId}";

podTemplate(
  label: podLabel,
  cloud: 'openshift',
  containers: [conts],
  volumes: [],
  serviceAccount: 'jenkins'
) {
  node(podLabel) {

    stage('Checkout ods-core') {
      sh 'mkdir -p ods-core'
      dir('ods-core') {
        checkout scm
        gitIsHttps = sh(
          returnStdout: true,
          script: 'git config remote.origin.url'
        ).trim().startsWith("https")
      }
    }

    stage('Checkout ods-configuration') {
      def bitbucketScheme = gitIsHttps ? 'https://' : 'http://'
      def bitbucketUrl = bitbucketScheme + bitbucketHost;
      echo("Getting ods configuration from ${bitbucketHost}")
      checkout([
        $class: 'GitSCM',
        branches: [[name: "*/master"]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[
          $class: 'RelativeTargetDirectory',
          relativeTargetDir: 'ods-configuration'
        ]],
        submoduleCfg: [],
        userRemoteConfigs: [[
          credentialsId: "${pipelineOpenShiftProject}-cd-user-with-password",
          url: "${bitbucketUrl}/scm/${odsBitbucketProject}/ods-configuration.git"
        ]]
      ])
    }

    stage('Create OpenShift projects') {
      dir('ods-core') {
        sh(
          script: """./create-projects/create-projects.sh --verbose \
            --project=${projectId} \
            --admins=${projectAdmins} \
            --groups=${projectGroups}""",
          label: 'Create OpenShift projects'
        )
      }
    }

    stage('Setup Jenkins in CD project') {
      dir('ods-core') {
        sh(
          script: """./create-projects/create-cd-jenkins.sh --verbose \
            --non-interactive \
            --project=${projectId} \
            --ods-namespace=${odsNamespace} \
            --ods-image-tag=${odsImageTag} \
            --pipeline-trigger-secret-b64=${pipelineTriggerSecret} \
            --cd-user-type=${cdUserType} \
            --cd-user-id-b64=${cdUserIdB64}""",
          label: 'Setup Jenkins in CD project'
        )
      }
    }
  }
}
